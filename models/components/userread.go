// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/flowaicom/flowai-sdk-go/internal/utils"
	"time"
)

// UserRead - Schema for reading/returning user data, aligned with DB model.
type UserRead struct {
	ID        string    `json:"id"`
	Email     *string   `json:"email,omitempty"`
	FirstName *string   `json:"first_name,omitempty"`
	LastName  *string   `json:"last_name,omitempty"`
	Username  *string   `json:"username,omitempty"`
	ImageURL  *string   `json:"image_url,omitempty"`
	OrgID     *string   `json:"org_id,omitempty"`
	IsActive  *bool     `default:"true" json:"is_active"`
	ClerkID   *string   `json:"clerk_id,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (u UserRead) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserRead) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserRead) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserRead) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UserRead) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *UserRead) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *UserRead) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *UserRead) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *UserRead) GetOrgID() *string {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *UserRead) GetIsActive() *bool {
	if o == nil {
		return nil
	}
	return o.IsActive
}

func (o *UserRead) GetClerkID() *string {
	if o == nil {
		return nil
	}
	return o.ClerkID
}

func (o *UserRead) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UserRead) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
