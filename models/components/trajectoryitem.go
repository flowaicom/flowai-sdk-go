// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/flowaicom/flowai-sdk-go/internal/utils"
	"time"
)

// ItemType - Derives the type of the trajectory item.
type ItemType string

const (
	ItemTypeMessage  ItemType = "message"
	ItemTypeToolCall ItemType = "tool_call"
	ItemTypeUnknown  ItemType = "unknown"
)

func (e ItemType) ToPointer() *ItemType {
	return &e
}
func (e *ItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "message":
		fallthrough
	case "tool_call":
		fallthrough
	case "unknown":
		*e = ItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemType: %v", v)
	}
}

// TrajectoryItem - Schema for reading a trajectory item, including the linked message or tool call.
type TrajectoryItem struct {
	ID         string    `json:"id"`
	Order      int64     `json:"order"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	TestCaseID string    `json:"test_case_id"`
	Message    *Message  `json:"message,omitempty"`
	ToolCall   *ToolCall `json:"tool_call,omitempty"`
	// Derives the type of the trajectory item.
	ItemType ItemType `json:"item_type"`
}

func (t TrajectoryItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrajectoryItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrajectoryItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TrajectoryItem) GetOrder() int64 {
	if o == nil {
		return 0
	}
	return o.Order
}

func (o *TrajectoryItem) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *TrajectoryItem) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *TrajectoryItem) GetTestCaseID() string {
	if o == nil {
		return ""
	}
	return o.TestCaseID
}

func (o *TrajectoryItem) GetMessage() *Message {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TrajectoryItem) GetToolCall() *ToolCall {
	if o == nil {
		return nil
	}
	return o.ToolCall
}

func (o *TrajectoryItem) GetItemType() ItemType {
	if o == nil {
		return ItemType("")
	}
	return o.ItemType
}
