// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/flowaicom/flowai-sdk-go/internal/utils"
)

type TrajectoryType string

const (
	TrajectoryTypeMessageStepCreate  TrajectoryType = "MessageStepCreate"
	TrajectoryTypeToolCallStepCreate TrajectoryType = "ToolCallStepCreate"
)

type Trajectory struct {
	MessageStepCreate  *MessageStepCreate  `queryParam:"inline"`
	ToolCallStepCreate *ToolCallStepCreate `queryParam:"inline"`

	Type TrajectoryType
}

func CreateTrajectoryMessageStepCreate(messageStepCreate MessageStepCreate) Trajectory {
	typ := TrajectoryTypeMessageStepCreate

	return Trajectory{
		MessageStepCreate: &messageStepCreate,
		Type:              typ,
	}
}

func CreateTrajectoryToolCallStepCreate(toolCallStepCreate ToolCallStepCreate) Trajectory {
	typ := TrajectoryTypeToolCallStepCreate

	return Trajectory{
		ToolCallStepCreate: &toolCallStepCreate,
		Type:               typ,
	}
}

func (u *Trajectory) UnmarshalJSON(data []byte) error {

	var messageStepCreate MessageStepCreate = MessageStepCreate{}
	if err := utils.UnmarshalJSON(data, &messageStepCreate, "", true, true); err == nil {
		u.MessageStepCreate = &messageStepCreate
		u.Type = TrajectoryTypeMessageStepCreate
		return nil
	}

	var toolCallStepCreate ToolCallStepCreate = ToolCallStepCreate{}
	if err := utils.UnmarshalJSON(data, &toolCallStepCreate, "", true, true); err == nil {
		u.ToolCallStepCreate = &toolCallStepCreate
		u.Type = TrajectoryTypeToolCallStepCreate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Trajectory", string(data))
}

func (u Trajectory) MarshalJSON() ([]byte, error) {
	if u.MessageStepCreate != nil {
		return utils.MarshalJSON(u.MessageStepCreate, "", true)
	}

	if u.ToolCallStepCreate != nil {
		return utils.MarshalJSON(u.ToolCallStepCreate, "", true)
	}

	return nil, errors.New("could not marshal union type Trajectory: all fields are null")
}

// TestCaseCreate - Schema for creating a test case, accepting nested objects
type TestCaseCreate struct {
	Name           *string      `json:"name,omitempty"`
	Description    *string      `json:"description,omitempty"`
	ExpectedOutput string       `json:"expected_output"`
	Status         string       `json:"status"`
	IsActive       *bool        `default:"true" json:"is_active"`
	Trajectory     []Trajectory `json:"trajectory,omitempty"`
}

func (t TestCaseCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TestCaseCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TestCaseCreate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TestCaseCreate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TestCaseCreate) GetExpectedOutput() string {
	if o == nil {
		return ""
	}
	return o.ExpectedOutput
}

func (o *TestCaseCreate) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *TestCaseCreate) GetIsActive() *bool {
	if o == nil {
		return nil
	}
	return o.IsActive
}

func (o *TestCaseCreate) GetTrajectory() []Trajectory {
	if o == nil {
		return nil
	}
	return o.Trajectory
}
