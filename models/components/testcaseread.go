// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/flowaicom/flowai-sdk-go/internal/utils"
	"time"
)

// TestCaseRead - Schema for reading/returning test case data
type TestCaseRead struct {
	Name               *string          `json:"name,omitempty"`
	Description        *string          `json:"description,omitempty"`
	ExpectedOutput     string           `json:"expected_output"`
	Status             string           `json:"status"`
	IsActive           *bool            `default:"true" json:"is_active"`
	ID                 string           `json:"id"`
	UserID             string           `json:"user_id"`
	CreatedAt          time.Time        `json:"created_at"`
	UpdatedAt          time.Time        `json:"updated_at"`
	Trajectory         []TrajectoryItem `json:"trajectory,omitempty"`
	ValidationCriteria []string         `json:"validation_criteria,omitempty"`
}

func (t TestCaseRead) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TestCaseRead) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TestCaseRead) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TestCaseRead) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TestCaseRead) GetExpectedOutput() string {
	if o == nil {
		return ""
	}
	return o.ExpectedOutput
}

func (o *TestCaseRead) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *TestCaseRead) GetIsActive() *bool {
	if o == nil {
		return nil
	}
	return o.IsActive
}

func (o *TestCaseRead) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TestCaseRead) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *TestCaseRead) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *TestCaseRead) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *TestCaseRead) GetTrajectory() []TrajectoryItem {
	if o == nil {
		return nil
	}
	return o.Trajectory
}

func (o *TestCaseRead) GetValidationCriteria() []string {
	if o == nil {
		return nil
	}
	return o.ValidationCriteria
}
